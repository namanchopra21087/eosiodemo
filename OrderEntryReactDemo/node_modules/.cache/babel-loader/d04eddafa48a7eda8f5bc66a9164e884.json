{"ast":null,"code":"const supportedChains = {\n  'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906': 'https://eos.greymass.com',\n  '2a02a0053e5a8cf73a56ba0fda11e4d92e0238a4a2aa74fccf46d5a910746840': 'https://jungle3.greymass.com',\n  '4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11': 'https://telos.greymass.com'\n};\n\nasync function apiCall(url, body) {\n  return (await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: body ? JSON.stringify(body) : undefined\n  })).json();\n}\n\nexport async function fuel(request, session, updatePrepareStatus) {\n  updatePrepareStatus('Detecting if Fuel is required.');\n  const cloned = request.clone();\n  const chainId = cloned.getChainId().toLowerCase();\n  const nodeUrl = supportedChains[chainId];\n\n  if (!nodeUrl) {\n    throw new Error('Chain does not support Fuel.');\n  }\n\n  const result = await apiCall(nodeUrl + '/v1/cosigner/sign', {\n    request: cloned,\n    signer: session.auth\n  });\n\n  if (result.data.signatures[0]) {\n    cloned.setInfoKey('fuel_sig', result.data.signatures[0]);\n  } else {\n    throw new Error('No signature returned from Fuel');\n  }\n\n  cloned.data.req = result.data.request;\n  return cloned;\n}","map":{"version":3,"sources":["../src/fuel.ts"],"names":[],"mappings":"AAGA,MAAM,eAAe,GAAG;AACpB,sEACI,0BAFgB;AAGpB,sEACI,8BAJgB;AAKpB,sEACI;AANgB,CAAxB;;AASA,eAAe,OAAf,CAAuB,GAAvB,EAAoC,IAApC,EAA8C;AAC1C,SAAO,CACH,MAAM,KAAK,CAAC,GAAD,EAAM;AACb,IAAA,MAAM,EAAE,MADK;AAEb,IAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFI;AAKb,IAAA,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,IAAf,CAAH,GAA0B;AALvB,GAAN,CADR,EAQL,IARK,EAAP;AASH;;AAED,OAAO,eAAe,IAAf,CACH,OADG,EAEH,OAFG,EAGH,mBAHG,EAG2C;AAE9C,EAAA,mBAAmB,CAAC,gCAAD,CAAnB;AACA,QAAM,MAAM,GAAG,OAAO,CAAC,KAAR,EAAf;AACA,QAAM,OAAO,GAAG,MAAM,CAAC,UAAP,GAAoB,WAApB,EAAhB;AACA,QAAM,OAAO,GAAG,eAAe,CAAC,OAAD,CAA/B;;AACA,MAAI,CAAC,OAAL,EAAc;AACV,UAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AACH;;AACD,QAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,GAAG,mBAAX,EAAgC;AACxD,IAAA,OAAO,EAAE,MAD+C;AAExD,IAAA,MAAM,EAAE,OAAO,CAAC;AAFwC,GAAhC,CAA5B;;AAIA,MAAI,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAuB,CAAvB,CAAJ,EAA+B;AAC3B,IAAA,MAAM,CAAC,UAAP,CAAkB,UAAlB,EAA8B,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAuB,CAAvB,CAA9B;AACH,GAFD,MAEO;AACH,UAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACH;;AACD,EAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,GAAkB,MAAM,CAAC,IAAP,CAAY,OAA9B;AACA,SAAO,MAAP;AACH","sourceRoot":"","sourcesContent":["const supportedChains = {\n    'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906': 'https://eos.greymass.com',\n    '2a02a0053e5a8cf73a56ba0fda11e4d92e0238a4a2aa74fccf46d5a910746840': 'https://jungle3.greymass.com',\n    '4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11': 'https://telos.greymass.com',\n};\nasync function apiCall(url, body) {\n    return (await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: body ? JSON.stringify(body) : undefined,\n    })).json();\n}\nexport async function fuel(request, session, updatePrepareStatus) {\n    updatePrepareStatus('Detecting if Fuel is required.');\n    const cloned = request.clone();\n    const chainId = cloned.getChainId().toLowerCase();\n    const nodeUrl = supportedChains[chainId];\n    if (!nodeUrl) {\n        throw new Error('Chain does not support Fuel.');\n    }\n    const result = await apiCall(nodeUrl + '/v1/cosigner/sign', {\n        request: cloned,\n        signer: session.auth,\n    });\n    if (result.data.signatures[0]) {\n        cloned.setInfoKey('fuel_sig', result.data.signatures[0]);\n    }\n    else {\n        throw new Error('No signature returned from Fuel');\n    }\n    cloned.data.req = result.data.request;\n    return cloned;\n}\n//# sourceMappingURL=fuel.js.map"]},"metadata":{},"sourceType":"module"}