{"ast":null,"code":"/**\n * Base64u - URL-Safe Base64 variant no padding.\n * Based on https://gist.github.com/jonleighton/958841\n */\nvar charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nvar lookup = new Uint8Array(256);\n\nfor (var i = 0; i < 64; i++) {\n  lookup[charset.charCodeAt(i)] = i;\n}\n\nexport function encode(data) {\n  var byteLength = data.byteLength;\n  var byteRemainder = byteLength % 3;\n  var mainLength = byteLength - byteRemainder;\n  var parts = [];\n  var a;\n  var b;\n  var c;\n  var d;\n  var chunk; // Main loop deals with bytes in chunks of 3\n\n  for (var _i = 0; _i < mainLength; _i += 3) {\n    // Combine the three bytes into a single integer\n    chunk = data[_i] << 16 | data[_i + 1] << 8 | data[_i + 2]; // Use bitmasks to extract 6-bit segments from the triplet\n\n    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n\n    b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n\n    c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n\n    d = chunk & 63; // 63       =  2^6 - 1\n    // Convert the raw binary segments to the appropriate ASCII encoding\n\n    parts.push(charset[a] + charset[b] + charset[c] + charset[d]);\n  } // Deal with the remaining bytes\n\n\n  if (byteRemainder === 1) {\n    chunk = data[mainLength];\n    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n    // Set the 4 least significant bits to zero\n\n    b = (chunk & 3) << 4; // 3   = 2^2 - 1\n\n    parts.push(charset[a] + charset[b]);\n  } else if (byteRemainder === 2) {\n    chunk = data[mainLength] << 8 | data[mainLength + 1];\n    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n\n    b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n    // Set the 2 least significant bits to zero\n\n    c = (chunk & 15) << 2; // 15    = 2^4 - 1\n\n    parts.push(charset[a] + charset[b] + charset[c]);\n  }\n\n  return parts.join('');\n}\nexport function decode(input) {\n  var byteLength = input.length * 0.75;\n  var data = new Uint8Array(byteLength);\n  var a;\n  var b;\n  var c;\n  var d;\n  var p = 0;\n\n  for (var _i2 = 0; _i2 < input.length; _i2 += 4) {\n    a = lookup[input.charCodeAt(_i2)];\n    b = lookup[input.charCodeAt(_i2 + 1)];\n    c = lookup[input.charCodeAt(_i2 + 2)];\n    d = lookup[input.charCodeAt(_i2 + 3)];\n    data[p++] = a << 2 | b >> 4;\n    data[p++] = (b & 15) << 4 | c >> 2;\n    data[p++] = (c & 3) << 6 | d & 63;\n  }\n\n  return data;\n}","map":{"version":3,"sources":["C:/Users/naman.chopra/Git-Repo/eosiodemo/OrderEntryReactDemo/node_modules/eosio-signing-request/lib/base64u.js"],"names":["charset","lookup","Uint8Array","i","charCodeAt","encode","data","byteLength","byteRemainder","mainLength","parts","a","b","c","d","chunk","push","join","decode","input","length","p"],"mappings":"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","sourcesContent":["/**\n * Base64u - URL-Safe Base64 variant no padding.\n * Based on https://gist.github.com/jonleighton/958841\n */\nconst charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nconst lookup = new Uint8Array(256);\nfor (let i = 0; i < 64; i++) {\n    lookup[charset.charCodeAt(i)] = i;\n}\nexport function encode(data) {\n    const byteLength = data.byteLength;\n    const byteRemainder = byteLength % 3;\n    const mainLength = byteLength - byteRemainder;\n    const parts = [];\n    let a;\n    let b;\n    let c;\n    let d;\n    let chunk;\n    // Main loop deals with bytes in chunks of 3\n    for (let i = 0; i < mainLength; i += 3) {\n        // Combine the three bytes into a single integer\n        chunk = (data[i] << 16) | (data[i + 1] << 8) | data[i + 2];\n        // Use bitmasks to extract 6-bit segments from the triplet\n        a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n        b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n        c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n        d = chunk & 63; // 63       =  2^6 - 1\n        // Convert the raw binary segments to the appropriate ASCII encoding\n        parts.push(charset[a] + charset[b] + charset[c] + charset[d]);\n    }\n    // Deal with the remaining bytes\n    if (byteRemainder === 1) {\n        chunk = data[mainLength];\n        a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n        // Set the 4 least significant bits to zero\n        b = (chunk & 3) << 4; // 3   = 2^2 - 1\n        parts.push(charset[a] + charset[b]);\n    }\n    else if (byteRemainder === 2) {\n        chunk = (data[mainLength] << 8) | data[mainLength + 1];\n        a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n        b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n        // Set the 2 least significant bits to zero\n        c = (chunk & 15) << 2; // 15    = 2^4 - 1\n        parts.push(charset[a] + charset[b] + charset[c]);\n    }\n    return parts.join('');\n}\nexport function decode(input) {\n    const byteLength = input.length * 0.75;\n    const data = new Uint8Array(byteLength);\n    let a;\n    let b;\n    let c;\n    let d;\n    let p = 0;\n    for (let i = 0; i < input.length; i += 4) {\n        a = lookup[input.charCodeAt(i)];\n        b = lookup[input.charCodeAt(i + 1)];\n        c = lookup[input.charCodeAt(i + 2)];\n        d = lookup[input.charCodeAt(i + 3)];\n        data[p++] = (a << 2) | (b >> 4);\n        data[p++] = ((b & 15) << 4) | (c >> 2);\n        data[p++] = ((c & 3) << 6) | (d & 63);\n    }\n    return data;\n}\n"]},"metadata":{},"sourceType":"module"}