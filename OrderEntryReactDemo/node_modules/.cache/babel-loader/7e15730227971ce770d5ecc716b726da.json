{"ast":null,"code":"import { SessionError } from './errors';\nimport { abiEncode, fetch, sealMessage } from './utils';\n/**\n * Type describing a link session that can create a eosjs compatible\n * signature provider and transact for a specific auth.\n */\n\nexport class LinkSession {\n  /**\n   * Convenience, remove this session from associated [[Link]] storage if set.\n   * Equivalent to:\n   * ```ts\n   * session.link.removeSession(session.identifier, session.auth)\n   * ```\n   */\n  async remove() {\n    if (this.link.storage) {\n      await this.link.removeSession(this.identifier, this.auth);\n    }\n  }\n  /** Restore a previously serialized session. */\n\n\n  static restore(link, data) {\n    switch (data.type) {\n      case 'channel':\n        return new LinkChannelSession(link, data.data, data.metadata);\n\n      case 'fallback':\n        return new LinkFallbackSession(link, data.data, data.metadata);\n\n      default:\n        throw new Error('Unable to restore, session data invalid');\n    }\n  }\n\n}\n/**\n * Link session that pushes requests over a channel.\n * @internal\n */\n\nexport class LinkChannelSession extends LinkSession {\n  constructor(link, data, metadata) {\n    super();\n    this.type = 'channel';\n    this.timeout = 2 * 60 * 1000; // ms\n\n    this.link = link;\n    this.auth = data.auth;\n    this.publicKey = data.publicKey;\n    this.channel = data.channel;\n    this.identifier = data.identifier;\n\n    this.encrypt = request => {\n      return sealMessage(request.encode(true, false), data.requestKey, data.channel.key);\n    };\n\n    this.metadata = { ...(metadata || {}),\n      timeout: this.timeout,\n      name: this.channel.name\n    };\n\n    this.serialize = () => ({\n      type: 'channel',\n      data,\n      metadata: this.metadata\n    });\n  }\n\n  onSuccess(request, result) {\n    if (this.link.transport.onSuccess) {\n      this.link.transport.onSuccess(request, result);\n    }\n  }\n\n  onFailure(request, error) {\n    if (this.link.transport.onFailure) {\n      this.link.transport.onFailure(request, error);\n    }\n  }\n\n  onRequest(request, cancel) {\n    const info = {\n      expiration: new Date(Date.now() + this.timeout).toISOString().slice(0, -1)\n    };\n\n    if (this.link.transport.onSessionRequest) {\n      this.link.transport.onSessionRequest(this, request, cancel);\n    }\n\n    setTimeout(() => {\n      cancel(new SessionError('Wallet did not respond in time', 'E_TIMEOUT'));\n    }, this.timeout + 500);\n    request.data.info.push({\n      key: 'link',\n      value: abiEncode(info, 'link_info')\n    });\n    fetch(this.channel.url, {\n      method: 'POST',\n      headers: {\n        'X-Buoy-Wait': (this.timeout / 1000).toFixed(0)\n      },\n      body: this.encrypt(request)\n    }).then(response => {\n      if (response.status !== 200) {\n        cancel(new SessionError('Unable to push message', 'E_DELIVERY'));\n      } else {// request delivered\n      }\n    }).catch(error => {\n      cancel(new SessionError(`Unable to reach link service (${error.message || String(error)})`, 'E_DELIVERY'));\n    });\n  }\n\n  prepare(request) {\n    if (this.link.transport.prepare) {\n      return this.link.transport.prepare(request, this);\n    }\n\n    return Promise.resolve(request);\n  }\n\n  showLoading() {\n    if (this.link.transport.showLoading) {\n      return this.link.transport.showLoading();\n    }\n  }\n\n  makeSignatureProvider() {\n    return this.link.makeSignatureProvider([this.publicKey], this);\n  }\n\n  makeAuthorityProvider() {\n    return this.link.makeAuthorityProvider();\n  }\n\n  transact(args, options) {\n    return this.link.transact(args, options, this);\n  }\n\n}\n/**\n * Link session that sends every request over the transport.\n * @internal\n */\n\nexport class LinkFallbackSession extends LinkSession {\n  constructor(link, data, metadata) {\n    super();\n    this.type = 'fallback';\n    this.link = link;\n    this.auth = data.auth;\n    this.publicKey = data.publicKey;\n    this.metadata = metadata || {};\n    this.identifier = data.identifier;\n\n    this.serialize = () => ({\n      type: this.type,\n      data,\n      metadata: this.metadata\n    });\n  }\n\n  onSuccess(request, result) {\n    if (this.link.transport.onSuccess) {\n      this.link.transport.onSuccess(request, result);\n    }\n  }\n\n  onFailure(request, error) {\n    if (this.link.transport.onFailure) {\n      this.link.transport.onFailure(request, error);\n    }\n  }\n\n  onRequest(request, cancel) {\n    if (this.link.transport.onSessionRequest) {\n      this.link.transport.onSessionRequest(this, request, cancel);\n    } else {\n      this.link.transport.onRequest(request, cancel);\n    }\n  }\n\n  prepare(request) {\n    if (this.link.transport.prepare) {\n      return this.link.transport.prepare(request, this);\n    }\n\n    return Promise.resolve(request);\n  }\n\n  showLoading() {\n    if (this.link.transport.showLoading) {\n      return this.link.transport.showLoading();\n    }\n  }\n\n  makeSignatureProvider() {\n    return this.link.makeSignatureProvider([this.publicKey], this);\n  }\n\n  makeAuthorityProvider() {\n    return this.link.makeAuthorityProvider();\n  }\n\n  transact(args, options) {\n    return this.link.transact(args, options, this);\n  }\n\n}","map":{"version":3,"sources":["../src/link-session.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { SessionError } from './errors';\nimport { abiEncode, fetch, sealMessage } from './utils';\n/**\n * Type describing a link session that can create a eosjs compatible\n * signature provider and transact for a specific auth.\n */\nexport class LinkSession {\n    /**\n     * Convenience, remove this session from associated [[Link]] storage if set.\n     * Equivalent to:\n     * ```ts\n     * session.link.removeSession(session.identifier, session.auth)\n     * ```\n     */\n    async remove() {\n        if (this.link.storage) {\n            await this.link.removeSession(this.identifier, this.auth);\n        }\n    }\n    /** Restore a previously serialized session. */\n    static restore(link, data) {\n        switch (data.type) {\n            case 'channel':\n                return new LinkChannelSession(link, data.data, data.metadata);\n            case 'fallback':\n                return new LinkFallbackSession(link, data.data, data.metadata);\n            default:\n                throw new Error('Unable to restore, session data invalid');\n        }\n    }\n}\n/**\n * Link session that pushes requests over a channel.\n * @internal\n */\nexport class LinkChannelSession extends LinkSession {\n    constructor(link, data, metadata) {\n        super();\n        this.type = 'channel';\n        this.timeout = 2 * 60 * 1000; // ms\n        this.link = link;\n        this.auth = data.auth;\n        this.publicKey = data.publicKey;\n        this.channel = data.channel;\n        this.identifier = data.identifier;\n        this.encrypt = (request) => {\n            return sealMessage(request.encode(true, false), data.requestKey, data.channel.key);\n        };\n        this.metadata = {\n            ...(metadata || {}),\n            timeout: this.timeout,\n            name: this.channel.name,\n        };\n        this.serialize = () => ({\n            type: 'channel',\n            data,\n            metadata: this.metadata,\n        });\n    }\n    onSuccess(request, result) {\n        if (this.link.transport.onSuccess) {\n            this.link.transport.onSuccess(request, result);\n        }\n    }\n    onFailure(request, error) {\n        if (this.link.transport.onFailure) {\n            this.link.transport.onFailure(request, error);\n        }\n    }\n    onRequest(request, cancel) {\n        const info = {\n            expiration: new Date(Date.now() + this.timeout).toISOString().slice(0, -1),\n        };\n        if (this.link.transport.onSessionRequest) {\n            this.link.transport.onSessionRequest(this, request, cancel);\n        }\n        setTimeout(() => {\n            cancel(new SessionError('Wallet did not respond in time', 'E_TIMEOUT'));\n        }, this.timeout + 500);\n        request.data.info.push({\n            key: 'link',\n            value: abiEncode(info, 'link_info'),\n        });\n        fetch(this.channel.url, {\n            method: 'POST',\n            headers: {\n                'X-Buoy-Wait': (this.timeout / 1000).toFixed(0),\n            },\n            body: this.encrypt(request),\n        })\n            .then((response) => {\n            if (response.status !== 200) {\n                cancel(new SessionError('Unable to push message', 'E_DELIVERY'));\n            }\n            else {\n                // request delivered\n            }\n        })\n            .catch((error) => {\n            cancel(new SessionError(`Unable to reach link service (${error.message || String(error)})`, 'E_DELIVERY'));\n        });\n    }\n    prepare(request) {\n        if (this.link.transport.prepare) {\n            return this.link.transport.prepare(request, this);\n        }\n        return Promise.resolve(request);\n    }\n    showLoading() {\n        if (this.link.transport.showLoading) {\n            return this.link.transport.showLoading();\n        }\n    }\n    makeSignatureProvider() {\n        return this.link.makeSignatureProvider([this.publicKey], this);\n    }\n    makeAuthorityProvider() {\n        return this.link.makeAuthorityProvider();\n    }\n    transact(args, options) {\n        return this.link.transact(args, options, this);\n    }\n}\n/**\n * Link session that sends every request over the transport.\n * @internal\n */\nexport class LinkFallbackSession extends LinkSession {\n    constructor(link, data, metadata) {\n        super();\n        this.type = 'fallback';\n        this.link = link;\n        this.auth = data.auth;\n        this.publicKey = data.publicKey;\n        this.metadata = metadata || {};\n        this.identifier = data.identifier;\n        this.serialize = () => ({\n            type: this.type,\n            data,\n            metadata: this.metadata,\n        });\n    }\n    onSuccess(request, result) {\n        if (this.link.transport.onSuccess) {\n            this.link.transport.onSuccess(request, result);\n        }\n    }\n    onFailure(request, error) {\n        if (this.link.transport.onFailure) {\n            this.link.transport.onFailure(request, error);\n        }\n    }\n    onRequest(request, cancel) {\n        if (this.link.transport.onSessionRequest) {\n            this.link.transport.onSessionRequest(this, request, cancel);\n        }\n        else {\n            this.link.transport.onRequest(request, cancel);\n        }\n    }\n    prepare(request) {\n        if (this.link.transport.prepare) {\n            return this.link.transport.prepare(request, this);\n        }\n        return Promise.resolve(request);\n    }\n    showLoading() {\n        if (this.link.transport.showLoading) {\n            return this.link.transport.showLoading();\n        }\n    }\n    makeSignatureProvider() {\n        return this.link.makeSignatureProvider([this.publicKey], this);\n    }\n    makeAuthorityProvider() {\n        return this.link.makeAuthorityProvider();\n    }\n    transact(args, options) {\n        return this.link.transact(args, options, this);\n    }\n}\n//# sourceMappingURL=link-session.js.map"]},"metadata":{},"sourceType":"module"}