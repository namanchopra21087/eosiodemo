{"ast":null,"code":"function encryptByte(self, byteParam, decrypt) {\n  var pad = self._cipher.encryptBlock(self._prev);\n\n  var out = pad[0] ^ byteParam;\n  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])]);\n  return out;\n}\n\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length;\n  var out = new Buffer(len);\n  var i = -1;\n\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt);\n  }\n\n  return out;\n};","map":{"version":3,"sources":["C:/Users/naman.chopra/Git-Repo/eosiodemo/OrderEntryReactDemo/node_modules/eosjs-ecc/node_modules/browserify-aes/modes/cfb8.js"],"names":["encryptByte","self","byteParam","decrypt","pad","_cipher","encryptBlock","_prev","out","Buffer","concat","slice","exports","encrypt","chunk","len","length","i"],"mappings":"AAAA,SAASA,WAAT,CAAsBC,IAAtB,EAA4BC,SAA5B,EAAuCC,OAAvC,EAAgD;AAC9C,MAAIC,GAAG,GAAGH,IAAI,CAACI,OAAL,CAAaC,YAAb,CAA0BL,IAAI,CAACM,KAA/B,CAAV;;AACA,MAAIC,GAAG,GAAGJ,GAAG,CAAC,CAAD,CAAH,GAASF,SAAnB;AACAD,EAAAA,IAAI,CAACM,KAAL,GAAaE,MAAM,CAACC,MAAP,CAAc,CAACT,IAAI,CAACM,KAAL,CAAWI,KAAX,CAAiB,CAAjB,CAAD,EAAsB,IAAIF,MAAJ,CAAW,CAACN,OAAO,GAAGD,SAAH,GAAeM,GAAvB,CAAX,CAAtB,CAAd,CAAb;AACA,SAAOA,GAAP;AACD;;AACDI,OAAO,CAACC,OAAR,GAAkB,UAAUZ,IAAV,EAAgBa,KAAhB,EAAuBX,OAAvB,EAAgC;AAChD,MAAIY,GAAG,GAAGD,KAAK,CAACE,MAAhB;AACA,MAAIR,GAAG,GAAG,IAAIC,MAAJ,CAAWM,GAAX,CAAV;AACA,MAAIE,CAAC,GAAG,CAAC,CAAT;;AACA,SAAO,EAAEA,CAAF,GAAMF,GAAb,EAAkB;AAChBP,IAAAA,GAAG,CAACS,CAAD,CAAH,GAASjB,WAAW,CAACC,IAAD,EAAOa,KAAK,CAACG,CAAD,CAAZ,EAAiBd,OAAjB,CAApB;AACD;;AACD,SAAOK,GAAP;AACD,CARD","sourcesContent":["function encryptByte (self, byteParam, decrypt) {\n  var pad = self._cipher.encryptBlock(self._prev)\n  var out = pad[0] ^ byteParam\n  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])\n  return out\n}\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length\n  var out = new Buffer(len)\n  var i = -1\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt)\n  }\n  return out\n}\n"]},"metadata":{},"sourceType":"script"}