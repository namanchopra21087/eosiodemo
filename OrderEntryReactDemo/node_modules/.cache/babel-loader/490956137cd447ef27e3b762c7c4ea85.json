{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\naman.chopra\\\\Git-Repo\\\\eosiodemo\\\\OrderEntryReactDemo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\naman.chopra\\\\Git-Repo\\\\eosiodemo\\\\OrderEntryReactDemo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar supportedChains = {\n  'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906': 'https://eos.greymass.com',\n  '2a02a0053e5a8cf73a56ba0fda11e4d92e0238a4a2aa74fccf46d5a910746840': 'https://jungle3.greymass.com',\n  '4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11': 'https://telos.greymass.com'\n};\n\nfunction apiCall(_x, _x2) {\n  return _apiCall.apply(this, arguments);\n}\n\nfunction _apiCall() {\n  _apiCall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, body) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: body ? JSON.stringify(body) : undefined\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent.json());\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _apiCall.apply(this, arguments);\n}\n\nexport function fuel(_x3, _x4, _x5) {\n  return _fuel.apply(this, arguments);\n}\n\nfunction _fuel() {\n  _fuel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request, session, updatePrepareStatus) {\n    var cloned, chainId, nodeUrl, result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            updatePrepareStatus('Detecting if Fuel is required.');\n            cloned = request.clone();\n            chainId = cloned.getChainId().toLowerCase();\n            nodeUrl = supportedChains[chainId];\n\n            if (nodeUrl) {\n              _context2.next = 6;\n              break;\n            }\n\n            throw new Error('Chain does not support Fuel.');\n\n          case 6:\n            _context2.next = 8;\n            return apiCall(nodeUrl + '/v1/cosigner/sign', {\n              request: cloned,\n              signer: session.auth\n            });\n\n          case 8:\n            result = _context2.sent;\n\n            if (!result.data.signatures[0]) {\n              _context2.next = 13;\n              break;\n            }\n\n            cloned.setInfoKey('fuel_sig', result.data.signatures[0]);\n            _context2.next = 14;\n            break;\n\n          case 13:\n            throw new Error('No signature returned from Fuel');\n\n          case 14:\n            cloned.data.req = result.data.request;\n            return _context2.abrupt(\"return\", cloned);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fuel.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/fuel.ts"],"names":[],"mappings":";;AAGA,IAAM,eAAe,GAAG;AACpB,sEACI,0BAFgB;AAGpB,sEACI,8BAJgB;AAKpB,sEACI;AANgB,CAAxB;;SASe,O;;;;;sEAAf,iBAAuB,GAAvB,EAAoC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEc,KAAK,CAAC,GAAD,EAAM;AACb,cAAA,MAAM,EAAE,MADK;AAEb,cAAA,OAAO,EAAE;AACL,gCAAgB;AADX,eAFI;AAKb,cAAA,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,IAAf,CAAH,GAA0B;AALvB,aAAN,CAFnB;;AAAA;AAAA,2DASM,IATN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAYA,gBAAsB,IAAtB;AAAA;AAAA;;;mEAAO,kBACH,OADG,EAEH,OAFG,EAGH,mBAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAKH,YAAA,mBAAmB,CAAC,gCAAD,CAAnB;AACM,YAAA,MANH,GAMY,OAAO,CAAC,KAAR,EANZ;AAOG,YAAA,OAPH,GAOa,MAAM,CAAC,UAAP,GAAoB,WAApB,EAPb;AAQG,YAAA,OARH,GAQa,eAAe,CAAC,OAAD,CAR5B;;AAAA,gBASE,OATF;AAAA;AAAA;AAAA;;AAAA,kBAUO,IAAI,KAAJ,CAAU,8BAAV,CAVP;;AAAA;AAAA;AAAA,mBAYkB,OAAO,CAAC,OAAO,GAAG,mBAAX,EAAgC;AACxD,cAAA,OAAO,EAAE,MAD+C;AAExD,cAAA,MAAM,EAAE,OAAO,CAAC;AAFwC,aAAhC,CAZzB;;AAAA;AAYG,YAAA,MAZH;;AAAA,iBAgBC,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAuB,CAAvB,CAhBD;AAAA;AAAA;AAAA;;AAiBC,YAAA,MAAM,CAAC,UAAP,CAAkB,UAAlB,EAA8B,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAuB,CAAvB,CAA9B;AAjBD;AAAA;;AAAA;AAAA,kBAmBO,IAAI,KAAJ,CAAU,iCAAV,CAnBP;;AAAA;AAqBH,YAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,GAAkB,MAAM,CAAC,IAAP,CAAY,OAA9B;AArBG,8CAsBI,MAtBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourceRoot":"","sourcesContent":["const supportedChains = {\n    'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906': 'https://eos.greymass.com',\n    '2a02a0053e5a8cf73a56ba0fda11e4d92e0238a4a2aa74fccf46d5a910746840': 'https://jungle3.greymass.com',\n    '4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11': 'https://telos.greymass.com',\n};\nasync function apiCall(url, body) {\n    return (await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: body ? JSON.stringify(body) : undefined,\n    })).json();\n}\nexport async function fuel(request, session, updatePrepareStatus) {\n    updatePrepareStatus('Detecting if Fuel is required.');\n    const cloned = request.clone();\n    const chainId = cloned.getChainId().toLowerCase();\n    const nodeUrl = supportedChains[chainId];\n    if (!nodeUrl) {\n        throw new Error('Chain does not support Fuel.');\n    }\n    const result = await apiCall(nodeUrl + '/v1/cosigner/sign', {\n        request: cloned,\n        signer: session.auth,\n    });\n    if (result.data.signatures[0]) {\n        cloned.setInfoKey('fuel_sig', result.data.signatures[0]);\n    }\n    else {\n        throw new Error('No signature returned from Fuel');\n    }\n    cloned.data.req = result.data.request;\n    return cloned;\n}\n//# sourceMappingURL=fuel.js.map"]},"metadata":{},"sourceType":"module"}