{"ast":null,"code":"var xor = require('buffer-xor');\n\nfunction incr32(iv) {\n  var len = iv.length;\n  var item;\n\n  while (len--) {\n    item = iv.readUInt8(len);\n\n    if (item === 255) {\n      iv.writeUInt8(0, len);\n    } else {\n      item++;\n      iv.writeUInt8(item, len);\n      break;\n    }\n  }\n}\n\nfunction getBlock(self) {\n  var out = self._cipher.encryptBlock(self._prev);\n\n  incr32(self._prev);\n  return out;\n}\n\nexports.encrypt = function (self, chunk) {\n  while (self._cache.length < chunk.length) {\n    self._cache = Buffer.concat([self._cache, getBlock(self)]);\n  }\n\n  var pad = self._cache.slice(0, chunk.length);\n\n  self._cache = self._cache.slice(chunk.length);\n  return xor(chunk, pad);\n};","map":{"version":3,"sources":["C:/Users/naman.chopra/Git-Repo/eosiodemo/OrderEntryReactDemo/node_modules/eosjs-ecc/node_modules/browserify-aes/modes/ctr.js"],"names":["xor","require","incr32","iv","len","length","item","readUInt8","writeUInt8","getBlock","self","out","_cipher","encryptBlock","_prev","exports","encrypt","chunk","_cache","Buffer","concat","pad","slice"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAjB;;AAEA,SAASC,MAAT,CAAiBC,EAAjB,EAAqB;AACnB,MAAIC,GAAG,GAAGD,EAAE,CAACE,MAAb;AACA,MAAIC,IAAJ;;AACA,SAAOF,GAAG,EAAV,EAAc;AACZE,IAAAA,IAAI,GAAGH,EAAE,CAACI,SAAH,CAAaH,GAAb,CAAP;;AACA,QAAIE,IAAI,KAAK,GAAb,EAAkB;AAChBH,MAAAA,EAAE,CAACK,UAAH,CAAc,CAAd,EAAiBJ,GAAjB;AACD,KAFD,MAEO;AACLE,MAAAA,IAAI;AACJH,MAAAA,EAAE,CAACK,UAAH,CAAcF,IAAd,EAAoBF,GAApB;AACA;AACD;AACF;AACF;;AAED,SAASK,QAAT,CAAmBC,IAAnB,EAAyB;AACvB,MAAIC,GAAG,GAAGD,IAAI,CAACE,OAAL,CAAaC,YAAb,CAA0BH,IAAI,CAACI,KAA/B,CAAV;;AACAZ,EAAAA,MAAM,CAACQ,IAAI,CAACI,KAAN,CAAN;AACA,SAAOH,GAAP;AACD;;AAEDI,OAAO,CAACC,OAAR,GAAkB,UAAUN,IAAV,EAAgBO,KAAhB,EAAuB;AACvC,SAAOP,IAAI,CAACQ,MAAL,CAAYb,MAAZ,GAAqBY,KAAK,CAACZ,MAAlC,EAA0C;AACxCK,IAAAA,IAAI,CAACQ,MAAL,GAAcC,MAAM,CAACC,MAAP,CAAc,CAACV,IAAI,CAACQ,MAAN,EAAcT,QAAQ,CAACC,IAAD,CAAtB,CAAd,CAAd;AACD;;AACD,MAAIW,GAAG,GAAGX,IAAI,CAACQ,MAAL,CAAYI,KAAZ,CAAkB,CAAlB,EAAqBL,KAAK,CAACZ,MAA3B,CAAV;;AACAK,EAAAA,IAAI,CAACQ,MAAL,GAAcR,IAAI,CAACQ,MAAL,CAAYI,KAAZ,CAAkBL,KAAK,CAACZ,MAAxB,CAAd;AACA,SAAOL,GAAG,CAACiB,KAAD,EAAQI,GAAR,CAAV;AACD,CAPD","sourcesContent":["var xor = require('buffer-xor')\n\nfunction incr32 (iv) {\n  var len = iv.length\n  var item\n  while (len--) {\n    item = iv.readUInt8(len)\n    if (item === 255) {\n      iv.writeUInt8(0, len)\n    } else {\n      item++\n      iv.writeUInt8(item, len)\n      break\n    }\n  }\n}\n\nfunction getBlock (self) {\n  var out = self._cipher.encryptBlock(self._prev)\n  incr32(self._prev)\n  return out\n}\n\nexports.encrypt = function (self, chunk) {\n  while (self._cache.length < chunk.length) {\n    self._cache = Buffer.concat([self._cache, getBlock(self)])\n  }\n  var pad = self._cache.slice(0, chunk.length)\n  self._cache = self._cache.slice(chunk.length)\n  return xor(chunk, pad)\n}\n"]},"metadata":{},"sourceType":"script"}