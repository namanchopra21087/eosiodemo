{"ast":null,"code":"\"use strict\";\n\nvar createHash = require('create-hash');\n\nvar createHmac = require('create-hmac');\n/** @namespace hash */\n\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\n\n\nfunction sha1(data, resultEncoding) {\n  return createHash('sha1').update(data).digest(resultEncoding);\n}\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\n\n\nfunction sha256(data, resultEncoding) {\n  return createHash('sha256').update(data).digest(resultEncoding);\n}\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\n\n\nfunction sha512(data, resultEncoding) {\n  return createHash('sha512').update(data).digest(resultEncoding);\n}\n\nfunction HmacSHA256(buffer, secret) {\n  return createHmac('sha256', secret).update(buffer).digest();\n}\n\nfunction ripemd160(data) {\n  try {\n    return createHash('rmd160').update(data).digest();\n  } catch (e) {\n    return createHash('ripemd160').update(data).digest();\n  }\n} // function hash160(buffer) {\n//   return ripemd160(sha256(buffer))\n// }\n//\n// function hash256(buffer) {\n//   return sha256(sha256(buffer))\n// }\n//\n// function HmacSHA512(buffer, secret) {\n//   return crypto.createHmac('sha512', secret).update(buffer).digest()\n// }\n\n\nmodule.exports = {\n  sha1: sha1,\n  sha256: sha256,\n  sha512: sha512,\n  HmacSHA256: HmacSHA256,\n  ripemd160: ripemd160 // hash160: hash160,\n  // hash256: hash256,\n  // HmacSHA512: HmacSHA512\n\n};","map":{"version":3,"sources":["C:/Users/naman.chopra/Git-Repo/eosiodemo/OrderEntryReactDemo/node_modules/eosjs-ecc/lib/hash.js"],"names":["createHash","require","createHmac","sha1","data","resultEncoding","update","digest","sha256","sha512","HmacSHA256","buffer","secret","ripemd160","e","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAAxB;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,SAASE,IAAT,CAAcC,IAAd,EAAoBC,cAApB,EAAoC;AAClC,SAAOL,UAAU,CAAC,MAAD,CAAV,CAAmBM,MAAnB,CAA0BF,IAA1B,EAAgCG,MAAhC,CAAuCF,cAAvC,CAAP;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASG,MAAT,CAAgBJ,IAAhB,EAAsBC,cAAtB,EAAsC;AACpC,SAAOL,UAAU,CAAC,QAAD,CAAV,CAAqBM,MAArB,CAA4BF,IAA5B,EAAkCG,MAAlC,CAAyCF,cAAzC,CAAP;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASI,MAAT,CAAgBL,IAAhB,EAAsBC,cAAtB,EAAsC;AACpC,SAAOL,UAAU,CAAC,QAAD,CAAV,CAAqBM,MAArB,CAA4BF,IAA5B,EAAkCG,MAAlC,CAAyCF,cAAzC,CAAP;AACD;;AAED,SAASK,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;AAClC,SAAOV,UAAU,CAAC,QAAD,EAAWU,MAAX,CAAV,CAA6BN,MAA7B,CAAoCK,MAApC,EAA4CJ,MAA5C,EAAP;AACD;;AAED,SAASM,SAAT,CAAmBT,IAAnB,EAAyB;AACvB,MAAI;AACF,WAAOJ,UAAU,CAAC,QAAD,CAAV,CAAqBM,MAArB,CAA4BF,IAA5B,EAAkCG,MAAlC,EAAP;AACD,GAFD,CAEE,OAAOO,CAAP,EAAU;AACV,WAAOd,UAAU,CAAC,WAAD,CAAV,CAAwBM,MAAxB,CAA+BF,IAA/B,EAAqCG,MAArC,EAAP;AACD;AACF,C,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAQ,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA,IAAI,EAAEA,IADS;AAEfK,EAAAA,MAAM,EAAEA,MAFO;AAGfC,EAAAA,MAAM,EAAEA,MAHO;AAIfC,EAAAA,UAAU,EAAEA,UAJG;AAKfG,EAAAA,SAAS,EAAEA,SALI,CAKM;AACrB;AACA;;AAPe,CAAjB","sourcesContent":["\"use strict\";\n\nvar createHash = require('create-hash');\n\nvar createHmac = require('create-hmac');\n/** @namespace hash */\n\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\n\n\nfunction sha1(data, resultEncoding) {\n  return createHash('sha1').update(data).digest(resultEncoding);\n}\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\n\n\nfunction sha256(data, resultEncoding) {\n  return createHash('sha256').update(data).digest(resultEncoding);\n}\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\n\n\nfunction sha512(data, resultEncoding) {\n  return createHash('sha512').update(data).digest(resultEncoding);\n}\n\nfunction HmacSHA256(buffer, secret) {\n  return createHmac('sha256', secret).update(buffer).digest();\n}\n\nfunction ripemd160(data) {\n  try {\n    return createHash('rmd160').update(data).digest();\n  } catch (e) {\n    return createHash('ripemd160').update(data).digest();\n  }\n} // function hash160(buffer) {\n//   return ripemd160(sha256(buffer))\n// }\n//\n// function hash256(buffer) {\n//   return sha256(sha256(buffer))\n// }\n//\n// function HmacSHA512(buffer, secret) {\n//   return crypto.createHmac('sha512', secret).update(buffer).digest()\n// }\n\n\nmodule.exports = {\n  sha1: sha1,\n  sha256: sha256,\n  sha512: sha512,\n  HmacSHA256: HmacSHA256,\n  ripemd160: ripemd160 // hash160: hash160,\n  // hash256: hash256,\n  // HmacSHA512: HmacSHA512\n\n};"]},"metadata":{},"sourceType":"script"}