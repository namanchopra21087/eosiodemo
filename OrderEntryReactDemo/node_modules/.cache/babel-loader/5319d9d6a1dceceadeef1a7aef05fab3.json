{"ast":null,"code":"var aes = require('./aes');\n\nvar Transform = require('cipher-base');\n\nvar inherits = require('inherits');\n\nvar modes = require('./modes');\n\nvar ebtk = require('evp_bytestokey');\n\nvar StreamCipher = require('./streamCipher');\n\nvar AuthCipher = require('./authCipher');\n\ninherits(Cipher, Transform);\n\nfunction Cipher(mode, key, iv) {\n  if (!(this instanceof Cipher)) {\n    return new Cipher(mode, key, iv);\n  }\n\n  Transform.call(this);\n  this._cache = new Splitter();\n  this._cipher = new aes.AES(key);\n  this._prev = new Buffer(iv.length);\n  iv.copy(this._prev);\n  this._mode = mode;\n  this._autopadding = true;\n}\n\nCipher.prototype._update = function (data) {\n  this._cache.add(data);\n\n  var chunk;\n  var thing;\n  var out = [];\n\n  while (chunk = this._cache.get()) {\n    thing = this._mode.encrypt(this, chunk);\n    out.push(thing);\n  }\n\n  return Buffer.concat(out);\n};\n\nCipher.prototype._final = function () {\n  var chunk = this._cache.flush();\n\n  if (this._autopadding) {\n    chunk = this._mode.encrypt(this, chunk);\n\n    this._cipher.scrub();\n\n    return chunk;\n  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {\n    this._cipher.scrub();\n\n    throw new Error('data not multiple of block length');\n  }\n};\n\nCipher.prototype.setAutoPadding = function (setTo) {\n  this._autopadding = !!setTo;\n  return this;\n};\n\nfunction Splitter() {\n  if (!(this instanceof Splitter)) {\n    return new Splitter();\n  }\n\n  this.cache = new Buffer('');\n}\n\nSplitter.prototype.add = function (data) {\n  this.cache = Buffer.concat([this.cache, data]);\n};\n\nSplitter.prototype.get = function () {\n  if (this.cache.length > 15) {\n    var out = this.cache.slice(0, 16);\n    this.cache = this.cache.slice(16);\n    return out;\n  }\n\n  return null;\n};\n\nSplitter.prototype.flush = function () {\n  var len = 16 - this.cache.length;\n  var padBuff = new Buffer(len);\n  var i = -1;\n\n  while (++i < len) {\n    padBuff.writeUInt8(len, i);\n  }\n\n  var out = Buffer.concat([this.cache, padBuff]);\n  return out;\n};\n\nvar modelist = {\n  ECB: require('./modes/ecb'),\n  CBC: require('./modes/cbc'),\n  CFB: require('./modes/cfb'),\n  CFB8: require('./modes/cfb8'),\n  CFB1: require('./modes/cfb1'),\n  OFB: require('./modes/ofb'),\n  CTR: require('./modes/ctr'),\n  GCM: require('./modes/ctr')\n};\n\nfunction createCipheriv(suite, password, iv) {\n  var config = modes[suite.toLowerCase()];\n\n  if (!config) {\n    throw new TypeError('invalid suite type');\n  }\n\n  if (typeof iv === 'string') {\n    iv = new Buffer(iv);\n  }\n\n  if (typeof password === 'string') {\n    password = new Buffer(password);\n  }\n\n  if (password.length !== config.key / 8) {\n    throw new TypeError('invalid key length ' + password.length);\n  }\n\n  if (iv.length !== config.iv) {\n    throw new TypeError('invalid iv length ' + iv.length);\n  }\n\n  if (config.type === 'stream') {\n    return new StreamCipher(modelist[config.mode], password, iv);\n  } else if (config.type === 'auth') {\n    return new AuthCipher(modelist[config.mode], password, iv);\n  }\n\n  return new Cipher(modelist[config.mode], password, iv);\n}\n\nfunction createCipher(suite, password) {\n  var config = modes[suite.toLowerCase()];\n\n  if (!config) {\n    throw new TypeError('invalid suite type');\n  }\n\n  var keys = ebtk(password, false, config.key, config.iv);\n  return createCipheriv(suite, keys.key, keys.iv);\n}\n\nexports.createCipheriv = createCipheriv;\nexports.createCipher = createCipher;","map":{"version":3,"sources":["C:/Users/naman.chopra/Git-Repo/eosiodemo/OrderEntryReactDemo/node_modules/eosjs-ecc/node_modules/browserify-aes/encrypter.js"],"names":["aes","require","Transform","inherits","modes","ebtk","StreamCipher","AuthCipher","Cipher","mode","key","iv","call","_cache","Splitter","_cipher","AES","_prev","Buffer","length","copy","_mode","_autopadding","prototype","_update","data","add","chunk","thing","out","get","encrypt","push","concat","_final","flush","scrub","toString","Error","setAutoPadding","setTo","cache","slice","len","padBuff","i","writeUInt8","modelist","ECB","CBC","CFB","CFB8","CFB1","OFB","CTR","GCM","createCipheriv","suite","password","config","toLowerCase","TypeError","type","createCipher","keys","exports"],"mappings":"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","sourcesContent":["var aes = require('./aes')\nvar Transform = require('cipher-base')\nvar inherits = require('inherits')\nvar modes = require('./modes')\nvar ebtk = require('evp_bytestokey')\nvar StreamCipher = require('./streamCipher')\nvar AuthCipher = require('./authCipher')\ninherits(Cipher, Transform)\nfunction Cipher (mode, key, iv) {\n  if (!(this instanceof Cipher)) {\n    return new Cipher(mode, key, iv)\n  }\n  Transform.call(this)\n  this._cache = new Splitter()\n  this._cipher = new aes.AES(key)\n  this._prev = new Buffer(iv.length)\n  iv.copy(this._prev)\n  this._mode = mode\n  this._autopadding = true\n}\nCipher.prototype._update = function (data) {\n  this._cache.add(data)\n  var chunk\n  var thing\n  var out = []\n  while ((chunk = this._cache.get())) {\n    thing = this._mode.encrypt(this, chunk)\n    out.push(thing)\n  }\n  return Buffer.concat(out)\n}\nCipher.prototype._final = function () {\n  var chunk = this._cache.flush()\n  if (this._autopadding) {\n    chunk = this._mode.encrypt(this, chunk)\n    this._cipher.scrub()\n    return chunk\n  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {\n    this._cipher.scrub()\n    throw new Error('data not multiple of block length')\n  }\n}\nCipher.prototype.setAutoPadding = function (setTo) {\n  this._autopadding = !!setTo\n  return this\n}\n\nfunction Splitter () {\n  if (!(this instanceof Splitter)) {\n    return new Splitter()\n  }\n  this.cache = new Buffer('')\n}\nSplitter.prototype.add = function (data) {\n  this.cache = Buffer.concat([this.cache, data])\n}\n\nSplitter.prototype.get = function () {\n  if (this.cache.length > 15) {\n    var out = this.cache.slice(0, 16)\n    this.cache = this.cache.slice(16)\n    return out\n  }\n  return null\n}\nSplitter.prototype.flush = function () {\n  var len = 16 - this.cache.length\n  var padBuff = new Buffer(len)\n\n  var i = -1\n  while (++i < len) {\n    padBuff.writeUInt8(len, i)\n  }\n  var out = Buffer.concat([this.cache, padBuff])\n  return out\n}\nvar modelist = {\n  ECB: require('./modes/ecb'),\n  CBC: require('./modes/cbc'),\n  CFB: require('./modes/cfb'),\n  CFB8: require('./modes/cfb8'),\n  CFB1: require('./modes/cfb1'),\n  OFB: require('./modes/ofb'),\n  CTR: require('./modes/ctr'),\n  GCM: require('./modes/ctr')\n}\n\nfunction createCipheriv (suite, password, iv) {\n  var config = modes[suite.toLowerCase()]\n  if (!config) {\n    throw new TypeError('invalid suite type')\n  }\n  if (typeof iv === 'string') {\n    iv = new Buffer(iv)\n  }\n  if (typeof password === 'string') {\n    password = new Buffer(password)\n  }\n  if (password.length !== config.key / 8) {\n    throw new TypeError('invalid key length ' + password.length)\n  }\n  if (iv.length !== config.iv) {\n    throw new TypeError('invalid iv length ' + iv.length)\n  }\n  if (config.type === 'stream') {\n    return new StreamCipher(modelist[config.mode], password, iv)\n  } else if (config.type === 'auth') {\n    return new AuthCipher(modelist[config.mode], password, iv)\n  }\n  return new Cipher(modelist[config.mode], password, iv)\n}\nfunction createCipher (suite, password) {\n  var config = modes[suite.toLowerCase()]\n  if (!config) {\n    throw new TypeError('invalid suite type')\n  }\n  var keys = ebtk(password, false, config.key, config.iv)\n  return createCipheriv(suite, keys.key, keys.iv)\n}\n\nexports.createCipheriv = createCipheriv\nexports.createCipher = createCipher\n"]},"metadata":{},"sourceType":"script"}