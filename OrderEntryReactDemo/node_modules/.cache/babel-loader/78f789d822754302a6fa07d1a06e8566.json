{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\naman.chopra\\\\Git-Repo\\\\eosiodemo\\\\OrderEntryReactDemo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _inherits from \"C:\\\\Users\\\\naman.chopra\\\\Git-Repo\\\\eosiodemo\\\\OrderEntryReactDemo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\naman.chopra\\\\Git-Repo\\\\eosiodemo\\\\OrderEntryReactDemo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\naman.chopra\\\\Git-Repo\\\\eosiodemo\\\\OrderEntryReactDemo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\naman.chopra\\\\Git-Repo\\\\eosiodemo\\\\OrderEntryReactDemo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\naman.chopra\\\\Git-Repo\\\\eosiodemo\\\\OrderEntryReactDemo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\naman.chopra\\\\Git-Repo\\\\eosiodemo\\\\OrderEntryReactDemo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { SessionError } from './errors';\nimport { abiEncode, fetch, sealMessage } from './utils';\n/**\n * Type describing a link session that can create a eosjs compatible\n * signature provider and transact for a specific auth.\n */\n\nexport var LinkSession = /*#__PURE__*/function () {\n  function LinkSession() {\n    _classCallCheck(this, LinkSession);\n  }\n\n  _createClass(LinkSession, [{\n    key: \"remove\",\n    value:\n    /**\n     * Convenience, remove this session from associated [[Link]] storage if set.\n     * Equivalent to:\n     * ```ts\n     * session.link.removeSession(session.identifier, session.auth)\n     * ```\n     */\n    function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.link.storage) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.link.removeSession(this.identifier, this.auth);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function remove() {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /** Restore a previously serialized session. */\n\n  }], [{\n    key: \"restore\",\n    value: function restore(link, data) {\n      switch (data.type) {\n        case 'channel':\n          return new LinkChannelSession(link, data.data, data.metadata);\n\n        case 'fallback':\n          return new LinkFallbackSession(link, data.data, data.metadata);\n\n        default:\n          throw new Error('Unable to restore, session data invalid');\n      }\n    }\n  }]);\n\n  return LinkSession;\n}();\n/**\n * Link session that pushes requests over a channel.\n * @internal\n */\n\nexport var LinkChannelSession = /*#__PURE__*/function (_LinkSession) {\n  _inherits(LinkChannelSession, _LinkSession);\n\n  var _super = _createSuper(LinkChannelSession);\n\n  function LinkChannelSession(link, data, metadata) {\n    var _this;\n\n    _classCallCheck(this, LinkChannelSession);\n\n    _this = _super.call(this);\n    _this.type = 'channel';\n    _this.timeout = 2 * 60 * 1000; // ms\n\n    _this.link = link;\n    _this.auth = data.auth;\n    _this.publicKey = data.publicKey;\n    _this.channel = data.channel;\n    _this.identifier = data.identifier;\n\n    _this.encrypt = function (request) {\n      return sealMessage(request.encode(true, false), data.requestKey, data.channel.key);\n    };\n\n    _this.metadata = _objectSpread(_objectSpread({}, metadata || {}), {}, {\n      timeout: _this.timeout,\n      name: _this.channel.name\n    });\n\n    _this.serialize = function () {\n      return {\n        type: 'channel',\n        data: data,\n        metadata: _this.metadata\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(LinkChannelSession, [{\n    key: \"onSuccess\",\n    value: function onSuccess(request, result) {\n      if (this.link.transport.onSuccess) {\n        this.link.transport.onSuccess(request, result);\n      }\n    }\n  }, {\n    key: \"onFailure\",\n    value: function onFailure(request, error) {\n      if (this.link.transport.onFailure) {\n        this.link.transport.onFailure(request, error);\n      }\n    }\n  }, {\n    key: \"onRequest\",\n    value: function onRequest(request, cancel) {\n      var info = {\n        expiration: new Date(Date.now() + this.timeout).toISOString().slice(0, -1)\n      };\n\n      if (this.link.transport.onSessionRequest) {\n        this.link.transport.onSessionRequest(this, request, cancel);\n      }\n\n      setTimeout(function () {\n        cancel(new SessionError('Wallet did not respond in time', 'E_TIMEOUT'));\n      }, this.timeout + 500);\n      request.data.info.push({\n        key: 'link',\n        value: abiEncode(info, 'link_info')\n      });\n      fetch(this.channel.url, {\n        method: 'POST',\n        headers: {\n          'X-Buoy-Wait': (this.timeout / 1000).toFixed(0)\n        },\n        body: this.encrypt(request)\n      }).then(function (response) {\n        if (response.status !== 200) {\n          cancel(new SessionError('Unable to push message', 'E_DELIVERY'));\n        } else {// request delivered\n        }\n      }).catch(function (error) {\n        cancel(new SessionError(\"Unable to reach link service (\".concat(error.message || String(error), \")\"), 'E_DELIVERY'));\n      });\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare(request) {\n      if (this.link.transport.prepare) {\n        return this.link.transport.prepare(request, this);\n      }\n\n      return Promise.resolve(request);\n    }\n  }, {\n    key: \"showLoading\",\n    value: function showLoading() {\n      if (this.link.transport.showLoading) {\n        return this.link.transport.showLoading();\n      }\n    }\n  }, {\n    key: \"makeSignatureProvider\",\n    value: function makeSignatureProvider() {\n      return this.link.makeSignatureProvider([this.publicKey], this);\n    }\n  }, {\n    key: \"makeAuthorityProvider\",\n    value: function makeAuthorityProvider() {\n      return this.link.makeAuthorityProvider();\n    }\n  }, {\n    key: \"transact\",\n    value: function transact(args, options) {\n      return this.link.transact(args, options, this);\n    }\n  }]);\n\n  return LinkChannelSession;\n}(LinkSession);\n/**\n * Link session that sends every request over the transport.\n * @internal\n */\n\nexport var LinkFallbackSession = /*#__PURE__*/function (_LinkSession2) {\n  _inherits(LinkFallbackSession, _LinkSession2);\n\n  var _super2 = _createSuper(LinkFallbackSession);\n\n  function LinkFallbackSession(link, data, metadata) {\n    var _this2;\n\n    _classCallCheck(this, LinkFallbackSession);\n\n    _this2 = _super2.call(this);\n    _this2.type = 'fallback';\n    _this2.link = link;\n    _this2.auth = data.auth;\n    _this2.publicKey = data.publicKey;\n    _this2.metadata = metadata || {};\n    _this2.identifier = data.identifier;\n\n    _this2.serialize = function () {\n      return {\n        type: _this2.type,\n        data: data,\n        metadata: _this2.metadata\n      };\n    };\n\n    return _this2;\n  }\n\n  _createClass(LinkFallbackSession, [{\n    key: \"onSuccess\",\n    value: function onSuccess(request, result) {\n      if (this.link.transport.onSuccess) {\n        this.link.transport.onSuccess(request, result);\n      }\n    }\n  }, {\n    key: \"onFailure\",\n    value: function onFailure(request, error) {\n      if (this.link.transport.onFailure) {\n        this.link.transport.onFailure(request, error);\n      }\n    }\n  }, {\n    key: \"onRequest\",\n    value: function onRequest(request, cancel) {\n      if (this.link.transport.onSessionRequest) {\n        this.link.transport.onSessionRequest(this, request, cancel);\n      } else {\n        this.link.transport.onRequest(request, cancel);\n      }\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare(request) {\n      if (this.link.transport.prepare) {\n        return this.link.transport.prepare(request, this);\n      }\n\n      return Promise.resolve(request);\n    }\n  }, {\n    key: \"showLoading\",\n    value: function showLoading() {\n      if (this.link.transport.showLoading) {\n        return this.link.transport.showLoading();\n      }\n    }\n  }, {\n    key: \"makeSignatureProvider\",\n    value: function makeSignatureProvider() {\n      return this.link.makeSignatureProvider([this.publicKey], this);\n    }\n  }, {\n    key: \"makeAuthorityProvider\",\n    value: function makeAuthorityProvider() {\n      return this.link.makeAuthorityProvider();\n    }\n  }, {\n    key: \"transact\",\n    value: function transact(args, options) {\n      return this.link.transact(args, options, this);\n    }\n  }]);\n\n  return LinkFallbackSession;\n}(LinkSession);","map":{"version":3,"sources":["../src/link-session.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { SessionError } from './errors';\nimport { abiEncode, fetch, sealMessage } from './utils';\n/**\n * Type describing a link session that can create a eosjs compatible\n * signature provider and transact for a specific auth.\n */\nexport class LinkSession {\n    /**\n     * Convenience, remove this session from associated [[Link]] storage if set.\n     * Equivalent to:\n     * ```ts\n     * session.link.removeSession(session.identifier, session.auth)\n     * ```\n     */\n    async remove() {\n        if (this.link.storage) {\n            await this.link.removeSession(this.identifier, this.auth);\n        }\n    }\n    /** Restore a previously serialized session. */\n    static restore(link, data) {\n        switch (data.type) {\n            case 'channel':\n                return new LinkChannelSession(link, data.data, data.metadata);\n            case 'fallback':\n                return new LinkFallbackSession(link, data.data, data.metadata);\n            default:\n                throw new Error('Unable to restore, session data invalid');\n        }\n    }\n}\n/**\n * Link session that pushes requests over a channel.\n * @internal\n */\nexport class LinkChannelSession extends LinkSession {\n    constructor(link, data, metadata) {\n        super();\n        this.type = 'channel';\n        this.timeout = 2 * 60 * 1000; // ms\n        this.link = link;\n        this.auth = data.auth;\n        this.publicKey = data.publicKey;\n        this.channel = data.channel;\n        this.identifier = data.identifier;\n        this.encrypt = (request) => {\n            return sealMessage(request.encode(true, false), data.requestKey, data.channel.key);\n        };\n        this.metadata = {\n            ...(metadata || {}),\n            timeout: this.timeout,\n            name: this.channel.name,\n        };\n        this.serialize = () => ({\n            type: 'channel',\n            data,\n            metadata: this.metadata,\n        });\n    }\n    onSuccess(request, result) {\n        if (this.link.transport.onSuccess) {\n            this.link.transport.onSuccess(request, result);\n        }\n    }\n    onFailure(request, error) {\n        if (this.link.transport.onFailure) {\n            this.link.transport.onFailure(request, error);\n        }\n    }\n    onRequest(request, cancel) {\n        const info = {\n            expiration: new Date(Date.now() + this.timeout).toISOString().slice(0, -1),\n        };\n        if (this.link.transport.onSessionRequest) {\n            this.link.transport.onSessionRequest(this, request, cancel);\n        }\n        setTimeout(() => {\n            cancel(new SessionError('Wallet did not respond in time', 'E_TIMEOUT'));\n        }, this.timeout + 500);\n        request.data.info.push({\n            key: 'link',\n            value: abiEncode(info, 'link_info'),\n        });\n        fetch(this.channel.url, {\n            method: 'POST',\n            headers: {\n                'X-Buoy-Wait': (this.timeout / 1000).toFixed(0),\n            },\n            body: this.encrypt(request),\n        })\n            .then((response) => {\n            if (response.status !== 200) {\n                cancel(new SessionError('Unable to push message', 'E_DELIVERY'));\n            }\n            else {\n                // request delivered\n            }\n        })\n            .catch((error) => {\n            cancel(new SessionError(`Unable to reach link service (${error.message || String(error)})`, 'E_DELIVERY'));\n        });\n    }\n    prepare(request) {\n        if (this.link.transport.prepare) {\n            return this.link.transport.prepare(request, this);\n        }\n        return Promise.resolve(request);\n    }\n    showLoading() {\n        if (this.link.transport.showLoading) {\n            return this.link.transport.showLoading();\n        }\n    }\n    makeSignatureProvider() {\n        return this.link.makeSignatureProvider([this.publicKey], this);\n    }\n    makeAuthorityProvider() {\n        return this.link.makeAuthorityProvider();\n    }\n    transact(args, options) {\n        return this.link.transact(args, options, this);\n    }\n}\n/**\n * Link session that sends every request over the transport.\n * @internal\n */\nexport class LinkFallbackSession extends LinkSession {\n    constructor(link, data, metadata) {\n        super();\n        this.type = 'fallback';\n        this.link = link;\n        this.auth = data.auth;\n        this.publicKey = data.publicKey;\n        this.metadata = metadata || {};\n        this.identifier = data.identifier;\n        this.serialize = () => ({\n            type: this.type,\n            data,\n            metadata: this.metadata,\n        });\n    }\n    onSuccess(request, result) {\n        if (this.link.transport.onSuccess) {\n            this.link.transport.onSuccess(request, result);\n        }\n    }\n    onFailure(request, error) {\n        if (this.link.transport.onFailure) {\n            this.link.transport.onFailure(request, error);\n        }\n    }\n    onRequest(request, cancel) {\n        if (this.link.transport.onSessionRequest) {\n            this.link.transport.onSessionRequest(this, request, cancel);\n        }\n        else {\n            this.link.transport.onRequest(request, cancel);\n        }\n    }\n    prepare(request) {\n        if (this.link.transport.prepare) {\n            return this.link.transport.prepare(request, this);\n        }\n        return Promise.resolve(request);\n    }\n    showLoading() {\n        if (this.link.transport.showLoading) {\n            return this.link.transport.showLoading();\n        }\n    }\n    makeSignatureProvider() {\n        return this.link.makeSignatureProvider([this.publicKey], this);\n    }\n    makeAuthorityProvider() {\n        return this.link.makeAuthorityProvider();\n    }\n    transact(args, options) {\n        return this.link.transact(args, options, this);\n    }\n}\n//# sourceMappingURL=link-session.js.map"]},"metadata":{},"sourceType":"module"}