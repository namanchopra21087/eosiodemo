import { CallbackPayload } from 'eosio-signing-request';
/** Service that handles waiting for a ESR callback to be sent to an url. */
export interface LinkCallbackService {
    create(): LinkCallback;
}
/** Can be returned by callback services if the user explicitly rejects the request. */
export interface LinkCallbackRejection {
    /** Rejection message. */
    rejected: string;
}
/** Callback response, can either be a ESR callback payload or a rejection message. */
export declare type LinkCallbackResponse = CallbackPayload | LinkCallbackRejection;
/** Callback that can be waited for. */
export interface LinkCallback {
    /** Url that should be hit to trigger the callback. */
    url: string;
    /** Wait for the callback to resolve. */
    wait(): Promise<LinkCallbackResponse>;
    /** Cancel a pending callback. */
    cancel(): void;
}
/** @internal */
export declare class BuoyCallbackService implements LinkCallbackService {
    readonly address: string;
    constructor(address: string);
    create(): BuoyCallback;
}
/** @internal */
declare class BuoyCallback implements LinkCallback {
    readonly url: string;
    constructor(url: string);
    private ctx;
    wait(): Promise<LinkCallbackResponse>;
    cancel(): void;
}
export {};
