{"version":3,"sources":["table.js","components/orderentry.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","TableHead","map","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","render","TableBody","row","i","getRowProps","cells","cell","getCellProps","defaultState","activeUser","accountName","orderItems","OrderEntryApp","props","respData","renderLogoutBtn","ual","activeAuthenticator","logout","className","Button","variant","onClick","handleOrderUpdate","event","setState","target","value","renderOrderForm","state","style","marginLeft","marginRight","width","marginTop","marginBottom","Form","Group","controlId","Label","Control","type","name","onChange","rpc","JsonRpc","updateAccountName","bind","renderOrderButton","placeorder","renderModalButton","loadTableData","a","this","console","log","orderTransaction","actions","account","authorization","actor","permission","userid","items","split","status","signTransaction","broadcast","window","location","reload","warn","getAccountName","updateAccountBalance","showModal","get_table_rows","json","code","scope","table","limit","reverse","show_payer","then","resp","logoutBtn","modalButton","loggedIn","orderBtn","u","undefined","get_account","textAlign","src","height","color","backgroundColor","paddingBottom","Header","accessor","React","displayName","App","ourNetwork","chainId","rpcEndpoints","protocol","host","port","anchor","Anchor","appName","service","disableGreymassFuel","requestStatus","OrderEntryAppConsumer","withUAL","chains","authenticators","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c423ceb7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useTable } from \"react-table\";\r\nimport MaUTable from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n\r\nconst Table = ({ columns, data }) => {\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      rows,\r\n      prepareRow\r\n    } = useTable({\r\n      columns,\r\n      data\r\n    });\r\n  \r\n    return (\r\n      <MaUTable {...getTableProps()}>\r\n        <TableHead>\r\n          {headerGroups.map(headerGroup => (\r\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <TableCell {...column.getHeaderProps()}>{column.render(\"Header\")}</TableCell>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableHead>\r\n        <TableBody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <TableRow {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return <TableCell {...cell.getCellProps()}>{cell.render(\"Cell\")}</TableCell>;\r\n                })}\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </MaUTable>\r\n    );\r\n  };\r\n\r\n  export default Table;\r\n","/*\n  Order Entry React Demo for EOSIO Training & Certification: AD101\n  \n  Several blocks have been commented out, as they will only\n  function as intended when the UAL (Universal Authenticator Library)\n  wrapper is implemented in App.js â€“ at which point props will\n  contain the ual object. Uncomment (or replace) these lines as\n  appropriate.\n*/\n\nimport * as React from 'react'\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './orderentry.css';\nimport { JsonRpc } from 'eosjs';\nimport Table from \"../table\"\n\nconst defaultState = {\n  activeUser: null, //to store user object from UAL\n  accountName: '', //to store account name of logged in wallet user\n  orderItems: '0'\n}\n\nclass OrderEntryApp extends React.Component {\n  static displayName = 'OrderEntryApp';\n  userid;\n  activeUser=null;\n  respData=null;\n  data=null;\n\n  constructor(props) {\n    super(props)\n    const ourNetwork={\n      chainId:'cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f',\n      rpcEndpoints:[{protocol:'http',host:'localhost',port:8888}]\n    };\n    this.state = {\n      ...defaultState,\n      rpc:new JsonRpc('http://localhost:8888')\n    }\n    this.updateAccountName = this.updateAccountName.bind(this)\n    this.renderOrderButton = this.renderOrderButton.bind(this)\n    this.placeorder = this.placeorder.bind(this)\n    this.renderModalButton = this.renderModalButton.bind(this)\n    this.handleOrderUpdate = this.handleOrderUpdate.bind(this)\n    this.renderOrderForm = this.renderOrderForm.bind(this)\n    this.loadTableData = this.loadTableData.bind(this)\n  }\n\n  // implement code to transact, using the order details, here\n  async placeorder() {\n    const { accountName, activeUser, orderItems } = this.state\n    console.log(\"With UAL implemented, this submits an order for items \" + orderItems);\n    const orderTransaction={\n      actions:[{\n        account:'eosiotraing',\n        name:'addorder',\n        authorization:[{actor:accountName,permission:'active'}],\n        data:{\n          userid:this.userid+1,\n          items:orderItems.split(\",\"),\n          status:'Active'\n        }\n      }]\n    }\n    try{\n      await activeUser.signTransaction(orderTransaction,{broadcast:true});\n      this.loadTableData()\n      window.location.reload()\n    }catch(error){\n      console.warn(error);\n    }\n  }\n\n\n  renderOrderButton() {\n    return (\n      <p className='ual-btn-wrapper'>\n        <Button variant=\"outline-warning\" onClick={this.placeorder}>\n          {'Place Order'}\n        </Button>\n      </p>\n    )\n  }\n\n\n  // once the UAL wrapper is implemented, the code below will function\n  \n  \n  componentDidUpdate() {\n    const { ual: { activeUser } } = this.props\n    if (activeUser && !this.state.activeUser) {\n      this.setState({ activeUser }, this.updateAccountName)\n    } else if (!activeUser && this.state.activeUser) {\n      this.setState(defaultState)\n    }\n  }\n  \n  async updateAccountName()   {\n    try {\n      const accountName = await this.state.activeUser.getAccountName()\n      this.setState({ accountName }, this.updateAccountBalance)\n    } catch (e) {\n      console.warn(e)\n    }\n  }\n\n  renderLogoutBtn = () => {\n    const { ual: { activeUser, activeAuthenticator, logout } } = this.props\n    if (!!activeUser && !!activeAuthenticator) {\n      this.activeUser=null;\n      return (\n        <p className='ual-btn-wrapper'>\n          <Button variant='outline-danger' onClick={logout}>\n            {'Logout'}\n          </Button>\n        </p>\n      )\n    }\n  }\n\n  renderModalButton() {\n    return (\n      <p className='ual-btn-wrapper'>\n        <Button variant='outline-primary'\n          onClick={this.props.ual.showModal}\n          className='ual-generic-button'>Connect to Wallet</Button>\n      </p>\n    )\n  }\n\n  handleOrderUpdate = (event) => {\n    this.setState({orderItems: event.target.value});\n  }\n\n  renderOrderForm = () => {\n    const { orderItems } = this.state\n    return(\n      <div style={{marginLeft: 'auto', marginRight:'auto', width:'25%', marginTop:'40px', marginBottom:'10px'}}>\n        <Form>\n          <Form.Group controlId=\"orderItems\">\n            <Form.Label>Items to order (comma separated):</Form.Label>\n            <Form.Control\n                  type=\"text\"\n                  name=\"orderItems\"\n                  value={orderItems}\n                  onChange={this.handleOrderUpdate}\n                />\n          </Form.Group>\n        </Form>\n      </div>\n    )\n  }\n\n  loadTableData () {\n    this.state.rpc.get_table_rows({\n      json:true,\n      code:'eosiotraing',\n      scope:'eosiotraing',\n      table:'orders',\n      limit:10,\n      reverse:true,\n      show_payer:false\n    }).then(resp=>{\n      this.respData=resp.rows;\n      this.userid=resp.rows[0].userid;\n    });      \n  }\n\n  render() {\n    let modalButton = this.renderModalButton()\n    let loggedIn = ''\n    let logoutBtn = null\n    const orderBtn = this.renderOrderButton()\n    // Once UAL wrapper is implemented, uncomment below lines\n    \n    const u=this.props.ual.activeUser;\n    if(u!=undefined || u!=null){\n       this.activeUser  = u.accountName;\n       loggedIn = u.accountName ? `Logged in as ${u.accountName}` : ''\n    }\n    \n    const { accountName } = this.state.rpc.get_account('eosiotraing');\n    modalButton = !this.activeUser && this.renderModalButton()\n    logoutBtn = this.renderLogoutBtn()\n    this.loadTableData()\n    if(this.respData!=null){\n      this.data =this.respData;\n    }else{\n      this.data =[];\n    }\n   \n    const columns = [\n      {\n        Header: \"OrderData\",\n        columns: [\n          {\n            Header: \"ID\",\n            accessor: \"id\"\n          },\n          {\n            Header: \"UserId\",\n            accessor: \"userid\"\n          },\n          {\n            Header: \"Status\",\n            accessor: \"status\"\n          },\n          {\n            Header: \"Items\",\n            accessor: \"items\"\n          },\n        ]\n      },\n    ];\n    \n    return (\n      <div  style={{ textAlign: 'center'}}>\n        <img src=\"https://bolttech-image.s3-ap-southeast-1.amazonaws.com/images/ph/phase2_welcome_banner.jpg\" height=\"200\"/>\n        <h2 style={{color:'#2EB5C7'}}>Bolttech Wallet App</h2>\n        <div style={{marginBottom: '20px'}}></div>\n        {modalButton}\n        <h3 style={{color:'#ffc107'}}>{loggedIn}</h3>\n        {this.renderOrderForm()}\n        {orderBtn}\n        <div style={{backgroundColor:'white',paddingBottom:'10px'}}>\n        <Table columns={columns} data={this.data} />\n        </div>\n        {logoutBtn}\n      </div>\n    )\n  }\n}\n\nexport default OrderEntryApp;","/*\n  Order Entry React Demo for EOSIO Training & Certification: AD101\n\n  Import and implement UAL plugins, consumer, and wrapper in this file\n*/\n\nimport React from 'react';\nimport { JsonRpc } from 'eosjs';\nimport OrderEntryApp from './components/orderentry';\n\nimport { UALProvider, withUAL } from 'ual-reactjs-renderer';\nimport {Anchor} from 'ual-anchor';\nimport ReactTable from \"react-table\";\n\nfunction App() {\n  \n  const ourNetwork={\n    chainId:\"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f\",\n    rpcEndpoints:[{protocol:\"http\",host:\"localhost\",port:8888}]\n  };\n  const anchor=new Anchor([ourNetwork],{\n    appName:'OrderEntryApp',\n    rpc:new JsonRpc('http://localhost:8888'),\n    service:\"https://cb.anchor.link\",\n    disableGreymassFuel:false,\n    requestStatus:false\n  })\n  const OrderEntryAppConsumer=withUAL(OrderEntryApp);\n  OrderEntryAppConsumer.displayName=\"OrderEntryApp\";\n  return(\n    <UALProvider chains={[ourNetwork]} authenticators={[anchor]} appName={'OrderEntryApp'}>\n        <OrderEntryAppConsumer/>\n    </UALProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}