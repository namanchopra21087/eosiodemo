{"version":3,"sources":["components/orderentry.jsx","App.js","serviceWorker.js","index.js"],"names":["defaultState","activeUser","accountName","orderItems","OrderEntryApp","props","renderLogoutBtn","ual","activeAuthenticator","logout","className","Button","variant","onClick","handleOrderUpdate","event","setState","target","value","renderOrderForm","state","style","marginLeft","marginRight","width","marginTop","marginBottom","Form","Group","controlId","Label","Control","type","name","onChange","updateAccountName","bind","renderOrderButton","placeorder","renderModalButton","a","this","console","log","getAccountName","updateAccountBalance","warn","showModal","loggedIn","logoutBtn","modalButton","orderBtn","textAlign","paddingTop","React","displayName","App","ourNetwork","chainId","rpcEndpoints","protocol","host","port","anchor","Anchor","appName","rpc","JsonRpc","service","disableGreymassFuel","requestStatus","OrderEntryAppConsumer","withUAL","chains","authenticators","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bacf96ed.chunk.js","sourcesContent":["/*\n  Order Entry React Demo for EOSIO Training & Certification: AD101\n  \n  Several blocks have been commented out, as they will only\n  function as intended when the UAL (Universal Authenticator Library)\n  wrapper is implemented in App.js â€“ at which point props will\n  contain the ual object. Uncomment (or replace) these lines as\n  appropriate.\n*/\n\nimport * as React from 'react'\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './orderentry.css';\n\nconst defaultState = {\n  activeUser: null, //to store user object from UAL\n  accountName: '', //to store account name of logged in wallet user\n  orderItems: '0'\n}\n\nclass OrderEntryApp extends React.Component {\n  static displayName = 'OrderEntryApp'\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      ...defaultState,\n    }\n    this.updateAccountName = this.updateAccountName.bind(this)\n    this.renderOrderButton = this.renderOrderButton.bind(this)\n    this.placeorder = this.placeorder.bind(this)\n    this.renderModalButton = this.renderModalButton.bind(this)\n    this.handleOrderUpdate = this.handleOrderUpdate.bind(this)\n    this.renderOrderForm = this.renderOrderForm.bind(this)\n  }\n\n  // implement code to transact, using the order details, here\n  async placeorder() {\n    const { accountName, activeUser, orderItems } = this.state\n    console.log(\"With UAL implemented, this submits an order for items \" + orderItems);\n  }\n\n\n  renderOrderButton() {\n    return (\n      <p className='ual-btn-wrapper'>\n        <Button variant=\"outline-warning\" onClick={this.placeorder}>\n          {'Place Order'}\n        </Button>\n      </p>\n    )\n  }\n\n\n  // once the UAL wrapper is implemented, the code below will function\n  \n  \n  componentDidUpdate() {\n    const { ual: { activeUser } } = this.props\n    if (activeUser && !this.state.activeUser) {\n      this.setState({ activeUser }, this.updateAccountName)\n    } else if (!activeUser && this.state.activeUser) {\n      this.setState(defaultState)\n    }\n  }\n  \n  async updateAccountName()   {\n    try {\n      const accountName = await this.state.activeUser.getAccountName()\n      this.setState({ accountName }, this.updateAccountBalance)\n    } catch (e) {\n      console.warn(e)\n    }\n  }\n\n  renderLogoutBtn = () => {\n    const { ual: { activeUser, activeAuthenticator, logout } } = this.props\n    if (!!activeUser && !!activeAuthenticator) {\n      return (\n        <p className='ual-btn-wrapper'>\n          <Button variant='outline-danger' onClick={logout}>\n            {'Logout'}\n          </Button>\n        </p>\n      )\n    }\n  }\n\n  renderModalButton() {\n    return (\n      <p className='ual-btn-wrapper'>\n        <Button variant='outline-primary'\n          onClick={this.props.ual.showModal}\n          className='ual-generic-button'>Connect to Wallet</Button>\n      </p>\n    )\n  }\n\n\n  handleOrderUpdate = (event) => {\n    this.setState({orderItems: event.target.value});\n  }\n\n  renderOrderForm = () => {\n    const { orderItems } = this.state\n    return(\n      <div style={{marginLeft: 'auto', marginRight:'auto', width:'25%', marginTop:'40px', marginBottom:'10px'}}>\n        <Form>\n          <Form.Group controlId=\"orderItems\">\n            <Form.Label>Items to order (comma separated):</Form.Label>\n            <Form.Control\n                  type=\"text\"\n                  name=\"orderItems\"\n                  value={orderItems}\n                  onChange={this.handleOrderUpdate}\n                />\n          </Form.Group>\n        </Form>\n      </div>\n    )\n  }\n\n  render() {\n    let modalButton = this.renderModalButton()\n    let loggedIn = ''\n    let logoutBtn = null\n    const orderBtn = this.renderOrderButton()\n\n    // Once UAL wrapper is implemented, uncomment below lines\n    \n    const { ual: { activeUser } } = this.props\n    const { accountName } = this.state\n    modalButton = !activeUser && this.renderModalButton()\n    logoutBtn = this.renderLogoutBtn()\n    loggedIn = accountName ? `Logged in as ${accountName}` : ''\n    \n\n    return (\n      <div style={{ textAlign: 'center', paddingTop: '50px' }}>\n        <h2>Order Entry React Demo</h2>\n        <span>EOSIO Training & Certification, AD101</span>\n        <div style={{marginBottom: '20px'}}></div>\n        {modalButton}\n        <h3 className='ual-subtitle'>{loggedIn}</h3>\n        {this.renderOrderForm()}\n        {orderBtn}\n        {logoutBtn}\n      </div>\n    )\n  }\n}\n\nexport default OrderEntryApp;","/*\n  Order Entry React Demo for EOSIO Training & Certification: AD101\n\n  Import and implement UAL plugins, consumer, and wrapper in this file\n*/\n\nimport React from 'react';\nimport { JsonRpc } from 'eosjs'\nimport OrderEntryApp from './components/orderentry';\n\nimport { UALProvider, withUAL } from 'ual-reactjs-renderer';\nimport {Anchor} from 'ual-anchor';\nfunction App() {\n  \n  const ourNetwork={\n    chainId:\"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f\",\n    rpcEndpoints:[{protocol:\"http\",host:\"localhost\",port:8888}]\n  };\n  const anchor=new Anchor([ourNetwork],{\n    appName:'OrderEntryApp',\n    rpc:new JsonRpc('${ourNetwork.rpcEndpoints.protocol},${ourNetwork.rpcEndpoints.host},${ourNetwork.rpcEndpoints.port}'),\n    service:\"https://cb.anchor.link\",\n    disableGreymassFuel:false,\n    requestStatus:false\n  })\n  const OrderEntryAppConsumer=withUAL(OrderEntryApp);\n  OrderEntryAppConsumer.displayName=\"OrderEntryApp\";\n  return(\n    <UALProvider chains={[ourNetwork]} authenticators={[anchor]} appName={'OrderEntryApp'}>\n        <OrderEntryAppConsumer/>\n    </UALProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}